from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import date, timedelta
from decimal import Decimal
from paiements.models import RemiseReduction


class Command(BaseCommand):
    help = 'Cr√©e des remises de base pour le syst√®me'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Cr√©ation des remises de base...'))
        
        # Date de d√©but et fin pour l'ann√©e scolaire courante
        today = date.today()
        if today.month >= 9:  # Ann√©e scolaire commence en septembre
            debut_annee = date(today.year, 9, 1)
            fin_annee = date(today.year + 1, 8, 31)
        else:
            debut_annee = date(today.year - 1, 9, 1)
            fin_annee = date(today.year, 8, 31)
        
        remises_a_creer = [
            {
                'nom': 'R√©duction fratrie - 2√®me enfant',
                'type_remise': 'POURCENTAGE',
                'valeur': Decimal('10.00'),
                'motif': 'FRATRIE',
                'description': 'R√©duction de 10% pour le deuxi√®me enfant de la m√™me famille',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': True
            },
            {
                'nom': 'R√©duction fratrie - 3√®me enfant et plus',
                'type_remise': 'POURCENTAGE',
                'valeur': Decimal('15.00'),
                'motif': 'FRATRIE',
                'description': 'R√©duction de 15% √† partir du troisi√®me enfant de la m√™me famille',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': True
            },
            {
                'nom': 'R√©duction m√©rite scolaire',
                'type_remise': 'POURCENTAGE',
                'valeur': Decimal('20.00'),
                'motif': 'MERITE',
                'description': 'R√©duction de 20% pour les √©l√®ves ayant obtenu une mention tr√®s bien',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': True
            },
            {
                'nom': 'Aide sociale',
                'type_remise': 'MONTANT_FIXE',
                'valeur': Decimal('50000'),
                'motif': 'SOCIALE',
                'description': 'Aide sociale de 50 000 GNF pour les familles en difficult√©',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': True
            },
            {
                'nom': 'Enfant d\'employ√©',
                'type_remise': 'POURCENTAGE',
                'valeur': Decimal('25.00'),
                'motif': 'EMPLOYEE',
                'description': 'R√©duction de 25% pour les enfants du personnel de l\'√©cole',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': True
            },
            {
                'nom': 'Paiement anticip√©',
                'type_remise': 'POURCENTAGE',
                'valeur': Decimal('5.00'),
                'motif': 'AUTRE',
                'description': 'R√©duction de 5% pour les paiements effectu√©s avant la date d\'√©ch√©ance',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': True
            },
            {
                'nom': 'Remise exceptionnelle COVID',
                'type_remise': 'MONTANT_FIXE',
                'valeur': Decimal('30000'),
                'motif': 'AUTRE',
                'description': 'Remise exceptionnelle de 30 000 GNF li√©e √† la situation sanitaire',
                'date_debut': debut_annee,
                'date_fin': fin_annee,
                'actif': False  # D√©sactiv√©e par d√©faut
            }
        ]
        
        created_count = 0
        updated_count = 0
        
        for remise_data in remises_a_creer:
            remise, created = RemiseReduction.objects.get_or_create(
                nom=remise_data['nom'],
                defaults=remise_data
            )
            
            if created:
                created_count += 1
                self.stdout.write(
                    self.style.SUCCESS(f'‚úì Remise cr√©√©e: {remise.nom}')
                )
            else:
                # Mettre √† jour les champs si la remise existe d√©j√†
                for field, value in remise_data.items():
                    if field != 'nom':  # Ne pas modifier le nom
                        setattr(remise, field, value)
                remise.save()
                updated_count += 1
                self.stdout.write(
                    self.style.WARNING(f'‚Üª Remise mise √† jour: {remise.nom}')
                )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'\n‚úÖ Termin√©! {created_count} remises cr√©√©es, {updated_count} mises √† jour.'
            )
        )
        
        # Afficher un r√©sum√© des remises actives
        remises_actives = RemiseReduction.objects.filter(actif=True).count()
        self.stdout.write(
            self.style.SUCCESS(f'üìä Total des remises actives: {remises_actives}')
        )
        
        self.stdout.write(
            self.style.SUCCESS(
                f'üóìÔ∏è  P√©riode de validit√©: {debut_annee.strftime("%d/%m/%Y")} - {fin_annee.strftime("%d/%m/%Y")}'
            )
        )
