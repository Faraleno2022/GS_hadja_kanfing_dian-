#!/usr/bin/env python
"""
Script de test pour valider le passage automatique au mois suivant lors de la cl√¥ture
"""

import os
import sys
import django
from decimal import Decimal

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecole_moderne.settings')
django.setup()

from django.contrib.auth.models import User
from eleves.models import Ecole
from salaires.models import PeriodeSalaire
from django.utils import timezone

def test_cloture_automatique():
    """Test du passage automatique au mois suivant lors de la cl√¥ture"""
    
    print("=== Test de la Cl√¥ture Automatique des P√©riodes ===\n")
    
    # 1. R√©cup√©rer l'√©cole et l'utilisateur admin
    try:
        ecole = Ecole.objects.first()
        admin_user = User.objects.filter(is_superuser=True).first()
        
        if not ecole or not admin_user:
            print("‚ùå √âcole ou utilisateur admin non trouv√©.")
            return
            
        print(f"‚úÖ √âcole : {ecole.nom}")
        print(f"‚úÖ Admin : {admin_user.username}\n")
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return
    
    # 2. Cr√©er une p√©riode de test pour septembre 2025
    try:
        # Supprimer les p√©riodes existantes pour le test
        PeriodeSalaire.objects.filter(
            mois__in=[9, 10],
            annee=2025,
            ecole=ecole
        ).delete()
        
        # Cr√©er la p√©riode de septembre 2025
        periode_septembre = PeriodeSalaire.objects.create(
            mois=9,
            annee=2025,
            ecole=ecole,
            nombre_semaines=Decimal('4.33'),
            cree_par=admin_user
        )
        
        print(f"‚úÖ P√©riode de test cr√©√©e : {periode_septembre}")
        print(f"   - Mois : {periode_septembre.mois}")
        print(f"   - Ann√©e : {periode_septembre.annee}")
        print(f"   - Cl√¥tur√©e : {periode_septembre.cloturee}")
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation p√©riode : {e}")
        return
    
    # 3. Simuler la cl√¥ture de la p√©riode
    try:
        print(f"\n=== Simulation de la Cl√¥ture ===")
        print(f"üîÑ Cl√¥ture de la p√©riode {periode_septembre}...")
        
        # V√©rifier qu'octobre n'existe pas encore
        octobre_avant = PeriodeSalaire.objects.filter(
            mois=10,
            annee=2025,
            ecole=ecole
        ).exists()
        
        print(f"   - P√©riode octobre avant cl√¥ture : {'Existe' if octobre_avant else 'N existe pas'}")
        
        # Cl√¥turer la p√©riode (simulation de la logique de la vue)
        periode_septembre.cloturee = True
        periode_septembre.date_cloture = timezone.now()
        periode_septembre.cloturee_par = admin_user
        periode_septembre.save()
        
        # Calculer le mois suivant
        mois_suivant = periode_septembre.mois + 1
        annee_suivante = periode_septembre.annee
        
        if mois_suivant > 12:
            mois_suivant = 1
            annee_suivante += 1
        
        # V√©rifier si la p√©riode suivante existe
        periode_suivante_existe = PeriodeSalaire.objects.filter(
            mois=mois_suivant,
            annee=annee_suivante,
            ecole=periode_septembre.ecole
        ).exists()
        
        if not periode_suivante_existe:
            # Cr√©er automatiquement la p√©riode suivante
            nouvelle_periode = PeriodeSalaire.objects.create(
                mois=mois_suivant,
                annee=annee_suivante,
                ecole=periode_septembre.ecole,
                nombre_semaines=periode_septembre.nombre_semaines,
                cree_par=admin_user
            )
            
            print(f"‚úÖ P√©riode cl√¥tur√©e avec succ√®s !")
            print(f"‚úÖ Nouvelle p√©riode cr√©√©e automatiquement : {nouvelle_periode}")
        else:
            print(f"‚úÖ P√©riode cl√¥tur√©e avec succ√®s !")
            print(f"‚ÑπÔ∏è  La p√©riode suivante existait d√©j√†.")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cl√¥ture : {e}")
        return
    
    # 4. V√©rifier les r√©sultats
    try:
        print(f"\n=== V√©rification des R√©sultats ===")
        
        # V√©rifier la p√©riode de septembre
        septembre_updated = PeriodeSalaire.objects.get(id=periode_septembre.id)
        print(f"üìÖ Septembre 2025 :")
        print(f"   - Cl√¥tur√©e : {'‚úÖ Oui' if septembre_updated.cloturee else '‚ùå Non'}")
        print(f"   - Date cl√¥ture : {septembre_updated.date_cloture}")
        print(f"   - Cl√¥tur√©e par : {septembre_updated.cloturee_par}")
        
        # V√©rifier la p√©riode d'octobre
        octobre_created = PeriodeSalaire.objects.filter(
            mois=10,
            annee=2025,
            ecole=ecole
        ).first()
        
        if octobre_created:
            print(f"üìÖ Octobre 2025 :")
            print(f"   - Cr√©√©e : ‚úÖ Oui")
            print(f"   - Cl√¥tur√©e : {'‚ùå Oui' if octobre_created.cloturee else '‚úÖ Non'}")
            print(f"   - Nombre semaines : {octobre_created.nombre_semaines}")
            print(f"   - Cr√©√©e par : {octobre_created.cree_par}")
        else:
            print(f"üìÖ Octobre 2025 : ‚ùå Non cr√©√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification : {e}")
        return
    
    # 5. Test du passage d'ann√©e (d√©cembre ‚Üí janvier)
    try:
        print(f"\n=== Test du Passage d'Ann√©e ===")
        
        # Cr√©er une p√©riode de d√©cembre 2025
        periode_decembre = PeriodeSalaire.objects.create(
            mois=12,
            annee=2025,
            ecole=ecole,
            nombre_semaines=Decimal('4.33'),
            cree_par=admin_user
        )
        
        print(f"‚úÖ P√©riode d√©cembre cr√©√©e : {periode_decembre}")
        
        # Simuler la cl√¥ture
        periode_decembre.cloturee = True
        periode_decembre.date_cloture = timezone.now()
        periode_decembre.cloturee_par = admin_user
        periode_decembre.save()
        
        # Calculer le mois suivant (passage d'ann√©e)
        mois_suivant = periode_decembre.mois + 1
        annee_suivante = periode_decembre.annee
        
        if mois_suivant > 12:
            mois_suivant = 1
            annee_suivante += 1
        
        # Cr√©er janvier 2026
        janvier_2026 = PeriodeSalaire.objects.create(
            mois=mois_suivant,
            annee=annee_suivante,
            ecole=periode_decembre.ecole,
            nombre_semaines=periode_decembre.nombre_semaines,
            cree_par=admin_user
        )
        
        print(f"‚úÖ Passage d'ann√©e r√©ussi : D√©cembre 2025 ‚Üí {janvier_2026}")
        print(f"   - Nouveau mois : {janvier_2026.mois} (janvier)")
        print(f"   - Nouvelle ann√©e : {janvier_2026.annee}")
        
    except Exception as e:
        print(f"‚ùå Erreur test passage d'ann√©e : {e}")
    
    # 6. Instructions pour tester l'interface
    print(f"\n=== Test de l'Interface Web ===")
    print(f"1. Acc√©dez √† : http://127.0.0.1:8000/salaires/periodes/")
    print(f"2. V√©rifiez la liste des p√©riodes cr√©√©es")
    print(f"3. Testez la cl√¥ture d'une p√©riode via l'interface")
    print(f"4. V√©rifiez que la p√©riode suivante est cr√©√©e automatiquement")
    
    print(f"\nüéâ Test de cl√¥ture automatique termin√© avec succ√®s !")
    print(f"Le syst√®me passe maintenant automatiquement au mois suivant lors de la cl√¥ture !")

if __name__ == '__main__':
    test_cloture_automatique()
