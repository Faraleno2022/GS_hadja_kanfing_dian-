from django.core.management.base import BaseCommand
from notes.models import BaremeAppreciation, SeuilAppreciation
from eleves.models import Ecole


class Command(BaseCommand):
    help = 'Cr√©e des bar√®mes d\'appr√©ciation par d√©faut'

    def handle(self, *args, **options):
        self.stdout.write("üéØ Cr√©ation des bar√®mes d'appr√©ciation...")
        
        # Cr√©er le bar√®me global
        self.creer_bareme_global()
        
        # Cr√©er les bar√®mes par √©cole
        self.creer_baremes_ecoles()
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ Bar√®mes d'appr√©ciation cr√©√©s avec succ√®s!"))
        self.stdout.write("\nVous pouvez maintenant:")
        self.stdout.write("1. Aller dans l'admin Django ‚Üí Notes ‚Üí Bar√®mes d'appr√©ciation")
        self.stdout.write("2. Modifier les seuils selon vos besoins")
        self.stdout.write("3. Cr√©er des bar√®mes personnalis√©s pour chaque √©cole")

    def creer_bareme_global(self):
        """Cr√©e un bar√®me d'appr√©ciation global par d√©faut."""
        bareme, created = BaremeAppreciation.objects.get_or_create(
            ecole=None,
            nom="Bar√®me Standard",
            defaults={
                'description': "Bar√®me d'appr√©ciation standard utilis√© par d√©faut",
                'actif': True
            }
        )
        
        if created:
            self.stdout.write(f"‚úì Bar√®me global cr√©√©: {bareme}")
            
            # Cr√©er les seuils d'appr√©ciation
            seuils = [
                (18, "Excellent", "#28a745"),
                (16, "Tr√®s bien", "#17a2b8"),
                (14, "Bien", "#007bff"),
                (12, "Assez bien", "#ffc107"),
                (10, "Passable", "#fd7e14"),
                (8, "M√©diocre", "#dc3545"),
                (0, "Insuffisant", "#6c757d"),
            ]
            
            for i, (note_min, appreciation, couleur) in enumerate(seuils):
                SeuilAppreciation.objects.create(
                    bareme=bareme,
                    note_min=note_min,
                    appreciation=appreciation,
                    couleur=couleur,
                    ordre=i,
                    actif=True
                )
                self.stdout.write(f"  ‚úì Seuil cr√©√©: {note_min}+ ‚Üí {appreciation}")
        else:
            self.stdout.write(f"‚Ñπ Bar√®me global existe d√©j√†: {bareme}")

    def creer_baremes_ecoles(self):
        """Cr√©e des bar√®mes sp√©cifiques pour chaque √©cole."""
        ecoles = Ecole.objects.all()
        
        for ecole in ecoles:
            bareme, created = BaremeAppreciation.objects.get_or_create(
                ecole=ecole,
                nom=f"Bar√®me {ecole.nom}",
                defaults={
                    'description': f"Bar√®me d'appr√©ciation sp√©cifique √† {ecole.nom}",
                    'actif': True
                }
            )
            
            if created:
                self.stdout.write(f"‚úì Bar√®me √©cole cr√©√©: {bareme}")
                
                # Seuils adapt√©s au contexte guin√©en
                seuils = [
                    (17, "Excellent", "#28a745"),
                    (15, "Tr√®s bien", "#17a2b8"),
                    (13, "Bien", "#007bff"),
                    (11, "Assez bien", "#ffc107"),
                    (10, "Passable", "#fd7e14"),
                    (8, "Faible", "#dc3545"),
                    (0, "Tr√®s faible", "#6c757d"),
                ]
                
                for i, (note_min, appreciation, couleur) in enumerate(seuils):
                    SeuilAppreciation.objects.create(
                        bareme=bareme,
                        note_min=note_min,
                        appreciation=appreciation,
                        couleur=couleur,
                        ordre=i,
                        actif=True
                    )
            else:
                self.stdout.write(f"‚Ñπ Bar√®me √©cole existe d√©j√†: {bareme}")
