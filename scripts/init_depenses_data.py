#!/usr/bin/env python
"""
Script d'initialisation des donn√©es de test pour le module D√©penses
Cr√©e des cat√©gories, fournisseurs et d√©penses de test
"""

import os
import sys
import django
from datetime import datetime, timedelta
from decimal import Decimal
import random

# Configuration Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecole_moderne.settings')
django.setup()

from django.contrib.auth.models import User
from django.db import models
from depenses.models import (
    CategorieDepense, Fournisseur, Depense, 
    BudgetAnnuel, HistoriqueDepense
)

def create_categories():
    """Cr√©er les cat√©gories de d√©penses"""
    print("üè∑Ô∏è  Cr√©ation des cat√©gories de d√©penses...")
    
    categories_data = [
        {
            'nom': 'Fonctionnement',
            'code': 'FONC',
            'description': 'D√©penses de fonctionnement courant de l\'√©cole'
        },
        {
            'nom': 'Investissement',
            'code': 'INV',
            'description': 'Investissements en √©quipements et infrastructure'
        },
        {
            'nom': 'Personnel',
            'code': 'PERS',
            'description': 'Salaires et charges du personnel'
        },
        {
            'nom': 'Maintenance',
            'code': 'MAINT',
            'description': 'Maintenance et r√©parations'
        },
        {
            'nom': 'Fournitures scolaires',
            'code': 'FOUR',
            'description': 'Fournitures et mat√©riel p√©dagogique'
        },
        {
            'nom': 'Utilities',
            'code': 'UTIL',
            'description': '√âlectricit√©, eau, internet, t√©l√©phone'
        },
        {
            'nom': 'Transport',
            'code': 'TRANS',
            'description': 'Frais de transport et carburant'
        },
        {
            'nom': 'Formation',
            'code': 'FORM',
            'description': 'Formation du personnel et d√©veloppement'
        }
    ]
    
    categories_created = 0
    for cat_data in categories_data:
        try:
            # V√©rifier d'abord si la cat√©gorie existe par code ou nom
            categorie = CategorieDepense.objects.filter(
                models.Q(code=cat_data['code']) | models.Q(nom=cat_data['nom'])
            ).first()
            
            if categorie:
                # Mettre √† jour si n√©cessaire
                if not categorie.actif:
                    categorie.actif = True
                    categorie.save()
                print(f"   ‚ÑπÔ∏è  Cat√©gorie existante: {categorie.code} - {categorie.nom}")
            else:
                # Cr√©er une nouvelle cat√©gorie
                categorie = CategorieDepense.objects.create(
                    code=cat_data['code'],
                    nom=cat_data['nom'],
                    description=cat_data['description'],
                    actif=True
                )
                categories_created += 1
                print(f"   ‚úÖ Cat√©gorie cr√©√©e: {categorie.code} - {categorie.nom}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur avec cat√©gorie {cat_data['code']}: {e}")
            continue
    
    print(f"üìä {categories_created} nouvelles cat√©gories cr√©√©es")
    return CategorieDepense.objects.filter(actif=True)

def create_fournisseurs():
    """Cr√©er les fournisseurs"""
    print("\nüè¢ Cr√©ation des fournisseurs...")
    
    fournisseurs_data = [
        {
            'nom': '√âlectricit√© de Guin√©e (EDG)',
            'type_fournisseur': 'ADMINISTRATION',
            'adresse': 'Conakry, Guin√©e',
            'telephone': '+224 622 123 456',
            'email': 'contact@edg.gn'
        },
        {
            'nom': 'Soci√©t√© des Eaux de Guin√©e (SEG)',
            'type_fournisseur': 'ADMINISTRATION',
            'adresse': 'Conakry, Guin√©e',
            'telephone': '+224 622 234 567',
            'email': 'contact@seg.gn'
        },
        {
            'nom': 'Orange Guin√©e',
            'type_fournisseur': 'ENTREPRISE',
            'adresse': 'Immeuble Kaloum Center, Conakry',
            'telephone': '+224 622 345 678',
            'email': 'entreprise@orange.gn'
        },
        {
            'nom': 'Papeterie Moderne SARL',
            'type_fournisseur': 'ENTREPRISE',
            'adresse': 'March√© Madina, Conakry',
            'telephone': '+224 622 456 789',
            'email': 'contact@papeterie-moderne.gn'
        },
        {
            'nom': 'Garage Auto Plus',
            'type_fournisseur': 'ENTREPRISE',
            'adresse': 'Route de Donka, Conakry',
            'telephone': '+224 622 567 890',
            'email': 'garage@autoplus.gn'
        },
        {
            'nom': 'Mamadou DIALLO - √âlectricien',
            'type_fournisseur': 'PARTICULIER',
            'adresse': 'Quartier Hamdallaye, Conakry',
            'telephone': '+224 622 678 901',
            'email': 'mamadou.diallo@gmail.com'
        },
        {
            'nom': 'Librairie Universitaire',
            'type_fournisseur': 'ENTREPRISE',
            'adresse': 'Avenue de la R√©publique, Conakry',
            'telephone': '+224 622 789 012',
            'email': 'contact@librairie-univ.gn'
        },
        {
            'nom': 'Soci√©t√© de Nettoyage PROPRE',
            'type_fournisseur': 'ENTREPRISE',
            'adresse': 'Cit√© Chemin de Fer, Conakry',
            'telephone': '+224 622 890 123',
            'email': 'contact@propre.gn'
        }
    ]
    
    fournisseurs_created = 0
    for four_data in fournisseurs_data:
        fournisseur, created = Fournisseur.objects.get_or_create(
            nom=four_data['nom'],
            defaults={
                'type_fournisseur': four_data['type_fournisseur'],
                'adresse': four_data['adresse'],
                'telephone': four_data['telephone'],
                'email': four_data['email'],
                'actif': True
            }
        )
        if created:
            fournisseurs_created += 1
            print(f"   ‚úÖ Fournisseur cr√©√©: {fournisseur.nom}")
    
    print(f"üè¢ {fournisseurs_created} nouveaux fournisseurs cr√©√©s")
    return Fournisseur.objects.filter(actif=True)

def create_depenses(categories, fournisseurs, user):
    """Cr√©er des d√©penses de test"""
    print("\nüí∞ Cr√©ation des d√©penses de test...")
    
    # Donn√©es de d√©penses r√©alistes pour une √©cole
    depenses_data = [
        {
            'numero_facture': 'EDG-2025-001',
            'libelle': 'Facture √©lectricit√© janvier 2025',
            'description': 'Consommation √©lectrique du mois de janvier pour les deux sites',
            'type_depense': 'FONCTIONNEMENT',
            'montant_ht': Decimal('850000'),
            'taux_tva': Decimal('18'),
            'statut': 'PAYEE',
            'categorie_code': 'UTIL',
            'fournisseur_nom': '√âlectricit√© de Guin√©e (EDG)',
            'days_ago': 25
        },
        {
            'numero_facture': 'SEG-2025-002',
            'libelle': 'Facture eau janvier 2025',
            'description': 'Consommation d\'eau potable pour les deux √©coles',
            'type_depense': 'FONCTIONNEMENT',
            'montant_ht': Decimal('320000'),
            'taux_tva': Decimal('18'),
            'statut': 'PAYEE',
            'categorie_code': 'UTIL',
            'fournisseur_nom': 'Soci√©t√© des Eaux de Guin√©e (SEG)',
            'days_ago': 20
        },
        {
            'numero_facture': 'ORA-2025-003',
            'libelle': 'Abonnement internet et t√©l√©phone',
            'description': 'Forfait internet haut d√©bit et communications t√©l√©phoniques',
            'type_depense': 'FONCTIONNEMENT',
            'montant_ht': Decimal('450000'),
            'taux_tva': Decimal('18'),
            'statut': 'VALIDEE',
            'categorie_code': 'UTIL',
            'fournisseur_nom': 'Orange Guin√©e',
            'days_ago': 15
        },
        {
            'numero_facture': 'PAP-2025-004',
            'libelle': 'Fournitures scolaires T2',
            'description': 'Cahiers, stylos, crayons, gommes pour le 2√®me trimestre',
            'type_depense': 'FONCTIONNEMENT',
            'montant_ht': Decimal('1200000'),
            'taux_tva': Decimal('18'),
            'statut': 'EN_ATTENTE',
            'categorie_code': 'FOUR',
            'fournisseur_nom': 'Papeterie Moderne SARL',
            'days_ago': 10
        },
        {
            'numero_facture': 'GAR-2025-005',
            'libelle': 'R√©paration bus scolaire',
            'description': 'Changement de pneus et r√©vision g√©n√©rale du bus',
            'type_depense': 'MAINTENANCE',
            'montant_ht': Decimal('750000'),
            'taux_tva': Decimal('18'),
            'statut': 'VALIDEE',
            'categorie_code': 'MAINT',
            'fournisseur_nom': 'Garage Auto Plus',
            'days_ago': 8
        },
        {
            'numero_facture': 'ELEC-2025-006',
            'libelle': 'Installation √©clairage LED',
            'description': 'Remplacement de l\'√©clairage traditionnel par des LED dans 5 classes',
            'type_depense': 'INVESTISSEMENT',
            'montant_ht': Decimal('2500000'),
            'taux_tva': Decimal('18'),
            'statut': 'EN_ATTENTE',
            'categorie_code': 'INV',
            'fournisseur_nom': 'Mamadou DIALLO - √âlectricien',
            'days_ago': 5
        },
        {
            'numero_facture': 'LIB-2025-007',
            'libelle': 'Manuels scolaires 2025',
            'description': 'Commande de nouveaux manuels pour les classes de CP √† CM2',
            'type_depense': 'FONCTIONNEMENT',
            'montant_ht': Decimal('1800000'),
            'taux_tva': Decimal('18'),
            'statut': 'BROUILLON',
            'categorie_code': 'FOUR',
            'fournisseur_nom': 'Librairie Universitaire',
            'days_ago': 3
        },
        {
            'numero_facture': 'NET-2025-008',
            'libelle': 'Service de nettoyage janvier',
            'description': 'Nettoyage quotidien des locaux et espaces communs',
            'type_depense': 'FONCTIONNEMENT',
            'montant_ht': Decimal('600000'),
            'taux_tva': Decimal('18'),
            'statut': 'PAYEE',
            'categorie_code': 'FONC',
            'fournisseur_nom': 'Soci√©t√© de Nettoyage PROPRE',
            'days_ago': 30
        }
    ]
    
    depenses_created = 0
    for dep_data in depenses_data:
        # Trouver la cat√©gorie et le fournisseur
        try:
            categorie = categories.get(code=dep_data['categorie_code'])
            fournisseur = fournisseurs.get(nom=dep_data['fournisseur_nom'])
        except:
            print(f"   ‚ö†Ô∏è  Cat√©gorie ou fournisseur non trouv√© pour {dep_data['numero_facture']}")
            continue
        
        # Calculer les dates
        date_facture = datetime.now().date() - timedelta(days=dep_data['days_ago'])
        date_echeance = date_facture + timedelta(days=30)  # √âch√©ance √† 30 jours
        
        # Calculer les montants
        montant_ht = dep_data['montant_ht']
        taux_tva = dep_data['taux_tva']
        montant_tva = montant_ht * taux_tva / 100
        montant_ttc = montant_ht + montant_tva
        
        # Cr√©er la d√©pense
        depense, created = Depense.objects.get_or_create(
            numero_facture=dep_data['numero_facture'],
            defaults={
                'categorie': categorie,
                'fournisseur': fournisseur,
                'libelle': dep_data['libelle'],
                'description': dep_data['description'],
                'type_depense': dep_data['type_depense'],
                'montant_ht': montant_ht,
                'taux_tva': taux_tva,
                'montant_tva': montant_tva,
                'montant_ttc': montant_ttc,
                'date_facture': date_facture,
                'date_echeance': date_echeance,
                'statut': dep_data['statut'],
                'cree_par': user,
                'date_creation': datetime.now() - timedelta(days=dep_data['days_ago'])
            }
        )
        
        if created:
            depenses_created += 1
            print(f"   ‚úÖ D√©pense cr√©√©e: {depense.numero_facture} - {depense.montant_ttc:,.0f} GNF")
            
            # Cr√©er l'historique de cr√©ation
            HistoriqueDepense.objects.create(
                depense=depense,
                action='CREATION',
                description=f'D√©pense cr√©√©e: {depense.libelle}',
                nouveau_statut=depense.statut,
                utilisateur=user,
                date_action=depense.date_creation
            )
            
            # Si la d√©pense est valid√©e ou pay√©e, ajouter l'historique correspondant
            if depense.statut in ['VALIDEE', 'PAYEE']:
                depense.valide_par = user
                depense.date_validation = depense.date_creation + timedelta(hours=2)
                depense.save()
                
                HistoriqueDepense.objects.create(
                    depense=depense,
                    action='VALIDATION',
                    description=f'D√©pense valid√©e: {depense.libelle}',
                    ancien_statut='EN_ATTENTE',
                    nouveau_statut='VALIDEE',
                    utilisateur=user,
                    date_action=depense.date_validation
                )
            
            if depense.statut == 'PAYEE':
                depense.date_paiement = date_facture + timedelta(days=random.randint(1, 25))
                depense.save()
                
                HistoriqueDepense.objects.create(
                    depense=depense,
                    action='PAIEMENT',
                    description=f'D√©pense pay√©e: {depense.libelle}',
                    ancien_statut='VALIDEE',
                    nouveau_statut='PAYEE',
                    utilisateur=user,
                    date_action=datetime.combine(depense.date_paiement, datetime.min.time())
                )
    
    print(f"üí∞ {depenses_created} nouvelles d√©penses cr√©√©es")

def create_budgets(categories, user):
    """Cr√©er des budgets annuels"""
    print("\nüìä Cr√©ation des budgets annuels 2025...")
    
    budgets_data = {
        'FONC': Decimal('15000000'),  # 15M GNF
        'INV': Decimal('8000000'),    # 8M GNF
        'PERS': Decimal('25000000'),  # 25M GNF
        'MAINT': Decimal('3000000'),  # 3M GNF
        'FOUR': Decimal('5000000'),   # 5M GNF
        'UTIL': Decimal('4000000'),   # 4M GNF
        'TRANS': Decimal('2000000'),  # 2M GNF
        'FORM': Decimal('1500000'),   # 1.5M GNF
    }
    
    budgets_created = 0
    for code, montant in budgets_data.items():
        try:
            categorie = categories.get(code=code)
            budget, created = BudgetAnnuel.objects.get_or_create(
                annee=2025,
                categorie=categorie,
                defaults={
                    'budget_prevu': montant,
                    'budget_engage': Decimal('0'),
                    'budget_consomme': Decimal('0'),
                    'cree_par': user
                }
            )
            if created:
                budgets_created += 1
                print(f"   ‚úÖ Budget cr√©√©: {categorie.nom} - {montant:,.0f} GNF")
        except:
            print(f"   ‚ö†Ô∏è  Cat√©gorie {code} non trouv√©e pour le budget")
    
    print(f"üìä {budgets_created} nouveaux budgets cr√©√©s")

def main():
    """Fonction principale"""
    print("üöÄ INITIALISATION DES DONN√âES DU MODULE D√âPENSES")
    print("=" * 60)
    
    # V√©rifier qu'un utilisateur existe
    try:
        user = User.objects.filter(is_superuser=True).first()
        if not user:
            user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√©. Cr√©ez d'abord un utilisateur.")
            return
        print(f"üë§ Utilisateur utilis√©: {user.username}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur: {e}")
        return
    
    try:
        # Cr√©er les donn√©es de base
        categories = create_categories()
        fournisseurs = create_fournisseurs()
        create_depenses(categories, fournisseurs, user)
        create_budgets(categories, user)
        
        print("\n" + "=" * 60)
        print("‚úÖ INITIALISATION TERMIN√âE AVEC SUCC√àS!")
        print("\nüìä R√âSUM√â:")
        print(f"   ‚Ä¢ Cat√©gories: {CategorieDepense.objects.count()}")
        print(f"   ‚Ä¢ Fournisseurs: {Fournisseur.objects.count()}")
        print(f"   ‚Ä¢ D√©penses: {Depense.objects.count()}")
        print(f"   ‚Ä¢ Budgets 2025: {BudgetAnnuel.objects.filter(annee=2025).count()}")
        
        # Statistiques des d√©penses
        total_depenses = Depense.objects.count()
        montant_total = sum(d.montant_ttc for d in Depense.objects.all())
        print(f"\nüí∞ STATISTIQUES FINANCI√àRES:")
        print(f"   ‚Ä¢ Total d√©penses: {total_depenses}")
        print(f"   ‚Ä¢ Montant total: {montant_total:,.0f} GNF")
        print(f"   ‚Ä¢ D√©penses pay√©es: {Depense.objects.filter(statut='PAYEE').count()}")
        print(f"   ‚Ä¢ D√©penses en attente: {Depense.objects.filter(statut='EN_ATTENTE').count()}")
        
        print(f"\nüîó Acc√©dez au module: http://127.0.0.1:8000/depenses/")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
